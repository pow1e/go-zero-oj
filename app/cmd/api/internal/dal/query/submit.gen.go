// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/wuqianaer/go-zero-oj/app/cmd/api/internal/dal/model"
)

func newSubmit(db *gorm.DB, opts ...gen.DOOption) submit {
	_submit := submit{}

	_submit.submitDo.UseDB(db, opts...)
	_submit.submitDo.UseModel(&model.Submit{})

	tableName := _submit.submitDo.TableName()
	_submit.ALL = field.NewAsterisk(tableName)
	_submit.ID = field.NewInt32(tableName, "id")
	_submit.Identity = field.NewString(tableName, "identity")
	_submit.ProblemIdentity = field.NewString(tableName, "problem_identity")
	_submit.UserIdentity = field.NewString(tableName, "user_identity")
	_submit.Status = field.NewInt32(tableName, "status")
	_submit.Language = field.NewInt32(tableName, "language")
	_submit.RunTime = field.NewInt32(tableName, "run_time")
	_submit.RunMem = field.NewInt32(tableName, "run_mem")
	_submit.CreatedAt = field.NewTime(tableName, "created_at")
	_submit.UpdatedAt = field.NewTime(tableName, "updated_at")
	_submit.DeletedAt = field.NewField(tableName, "deleted_at")

	_submit.fillFieldMap()

	return _submit
}

type submit struct {
	submitDo

	ALL             field.Asterisk
	ID              field.Int32
	Identity        field.String
	ProblemIdentity field.String // 问题的唯一标识
	UserIdentity    field.String // 用户的唯一标识
	Status          field.Int32  // -1表示待判断，1表示答案正确，2表示答案错误，3表示运行超时，4表示运行超内存
	Language        field.Int32  // 1表示go 2表示java 3表示rust
	RunTime         field.Int32  // 运行时间
	RunMem          field.Int32  // 运行内存
	CreatedAt       field.Time   // 创建时间
	UpdatedAt       field.Time   // 修改时间
	DeletedAt       field.Field  // 删除时间(软删除)

	fieldMap map[string]field.Expr
}

func (s submit) Table(newTableName string) *submit {
	s.submitDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s submit) As(alias string) *submit {
	s.submitDo.DO = *(s.submitDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *submit) updateTableName(table string) *submit {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt32(table, "id")
	s.Identity = field.NewString(table, "identity")
	s.ProblemIdentity = field.NewString(table, "problem_identity")
	s.UserIdentity = field.NewString(table, "user_identity")
	s.Status = field.NewInt32(table, "status")
	s.Language = field.NewInt32(table, "language")
	s.RunTime = field.NewInt32(table, "run_time")
	s.RunMem = field.NewInt32(table, "run_mem")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")
	s.DeletedAt = field.NewField(table, "deleted_at")

	s.fillFieldMap()

	return s
}

func (s *submit) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *submit) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 11)
	s.fieldMap["id"] = s.ID
	s.fieldMap["identity"] = s.Identity
	s.fieldMap["problem_identity"] = s.ProblemIdentity
	s.fieldMap["user_identity"] = s.UserIdentity
	s.fieldMap["status"] = s.Status
	s.fieldMap["language"] = s.Language
	s.fieldMap["run_time"] = s.RunTime
	s.fieldMap["run_mem"] = s.RunMem
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["deleted_at"] = s.DeletedAt
}

func (s submit) clone(db *gorm.DB) submit {
	s.submitDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s submit) replaceDB(db *gorm.DB) submit {
	s.submitDo.ReplaceDB(db)
	return s
}

type submitDo struct{ gen.DO }

type ISubmitDo interface {
	gen.SubQuery
	Debug() ISubmitDo
	WithContext(ctx context.Context) ISubmitDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISubmitDo
	WriteDB() ISubmitDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISubmitDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISubmitDo
	Not(conds ...gen.Condition) ISubmitDo
	Or(conds ...gen.Condition) ISubmitDo
	Select(conds ...field.Expr) ISubmitDo
	Where(conds ...gen.Condition) ISubmitDo
	Order(conds ...field.Expr) ISubmitDo
	Distinct(cols ...field.Expr) ISubmitDo
	Omit(cols ...field.Expr) ISubmitDo
	Join(table schema.Tabler, on ...field.Expr) ISubmitDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISubmitDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISubmitDo
	Group(cols ...field.Expr) ISubmitDo
	Having(conds ...gen.Condition) ISubmitDo
	Limit(limit int) ISubmitDo
	Offset(offset int) ISubmitDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISubmitDo
	Unscoped() ISubmitDo
	Create(values ...*model.Submit) error
	CreateInBatches(values []*model.Submit, batchSize int) error
	Save(values ...*model.Submit) error
	First() (*model.Submit, error)
	Take() (*model.Submit, error)
	Last() (*model.Submit, error)
	Find() ([]*model.Submit, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Submit, err error)
	FindInBatches(result *[]*model.Submit, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Submit) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISubmitDo
	Assign(attrs ...field.AssignExpr) ISubmitDo
	Joins(fields ...field.RelationField) ISubmitDo
	Preload(fields ...field.RelationField) ISubmitDo
	FirstOrInit() (*model.Submit, error)
	FirstOrCreate() (*model.Submit, error)
	FindByPage(offset int, limit int) (result []*model.Submit, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISubmitDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s submitDo) Debug() ISubmitDo {
	return s.withDO(s.DO.Debug())
}

func (s submitDo) WithContext(ctx context.Context) ISubmitDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s submitDo) ReadDB() ISubmitDo {
	return s.Clauses(dbresolver.Read)
}

func (s submitDo) WriteDB() ISubmitDo {
	return s.Clauses(dbresolver.Write)
}

func (s submitDo) Session(config *gorm.Session) ISubmitDo {
	return s.withDO(s.DO.Session(config))
}

func (s submitDo) Clauses(conds ...clause.Expression) ISubmitDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s submitDo) Returning(value interface{}, columns ...string) ISubmitDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s submitDo) Not(conds ...gen.Condition) ISubmitDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s submitDo) Or(conds ...gen.Condition) ISubmitDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s submitDo) Select(conds ...field.Expr) ISubmitDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s submitDo) Where(conds ...gen.Condition) ISubmitDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s submitDo) Order(conds ...field.Expr) ISubmitDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s submitDo) Distinct(cols ...field.Expr) ISubmitDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s submitDo) Omit(cols ...field.Expr) ISubmitDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s submitDo) Join(table schema.Tabler, on ...field.Expr) ISubmitDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s submitDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISubmitDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s submitDo) RightJoin(table schema.Tabler, on ...field.Expr) ISubmitDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s submitDo) Group(cols ...field.Expr) ISubmitDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s submitDo) Having(conds ...gen.Condition) ISubmitDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s submitDo) Limit(limit int) ISubmitDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s submitDo) Offset(offset int) ISubmitDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s submitDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISubmitDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s submitDo) Unscoped() ISubmitDo {
	return s.withDO(s.DO.Unscoped())
}

func (s submitDo) Create(values ...*model.Submit) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s submitDo) CreateInBatches(values []*model.Submit, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s submitDo) Save(values ...*model.Submit) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s submitDo) First() (*model.Submit, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Submit), nil
	}
}

func (s submitDo) Take() (*model.Submit, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Submit), nil
	}
}

func (s submitDo) Last() (*model.Submit, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Submit), nil
	}
}

func (s submitDo) Find() ([]*model.Submit, error) {
	result, err := s.DO.Find()
	return result.([]*model.Submit), err
}

func (s submitDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Submit, err error) {
	buf := make([]*model.Submit, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s submitDo) FindInBatches(result *[]*model.Submit, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s submitDo) Attrs(attrs ...field.AssignExpr) ISubmitDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s submitDo) Assign(attrs ...field.AssignExpr) ISubmitDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s submitDo) Joins(fields ...field.RelationField) ISubmitDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s submitDo) Preload(fields ...field.RelationField) ISubmitDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s submitDo) FirstOrInit() (*model.Submit, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Submit), nil
	}
}

func (s submitDo) FirstOrCreate() (*model.Submit, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Submit), nil
	}
}

func (s submitDo) FindByPage(offset int, limit int) (result []*model.Submit, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s submitDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s submitDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s submitDo) Delete(models ...*model.Submit) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *submitDo) withDO(do gen.Dao) *submitDo {
	s.DO = *do.(*gen.DO)
	return s
}
